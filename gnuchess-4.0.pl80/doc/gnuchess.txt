


gnuchess(6)                                                       gnuchess(6)



NAME
  gnuchess - Chess

SYNOPSIS
  ggnnuucchheessss [ [[[[--||++]]aa]] [[--AA aaggiinngg--rraattee]] [[--bb bbooookkffiillee]] [[--BB bbiinnbbooookkffiillee]] [[--CC
  ccaacchhee--ttaabbllee--ssiizzee]] [[--cc]] [[[[--||++]]DD ]] [[[[--||++]]EE ]] [[[[--||++]]ee ]] [[[[--||++]]FF ]] [[--HH hhaasshh--
  ddeepptthh]] [[[[--||++]]hh ]] [[--LL llaanngguuaaggee]] [[--ll lliissttffiillee]] [[[[--||++]]NN]] [[[[--||++]]pp ]] [[--PP ppllyyss]]
  [[--rr lleennggtthh]] [[--ss ssaavveeffiillee]] [[--SS bbiinnbbooookkssiizzee]] [[--tt]] [[--cc hhaasshhffiillee--ssiizzee]] [[--TT
  ttrraannssiittiioonn--ttaabbllee--ssiizzee]] [[[[--||++]]VV]] [[--vv]] [[--xx]] [[--zz sseeaarrcchh--ffuuzzzz]] aarrgg11 aarrgg22 ]

DESCRIPTION
  _G_n_u_c_h_e_s_s plays a game of chess against the user or it plays against itself.

  _G_n_u_c_h_e_s_s is an updated version of the GNU chess playing program.  It has a
  simple alpha-numeric board display, an IBM PC compatible interface, or it
  can be compiled for use with the cchheessssttooooll program on a SUN workstation or
  with the xxbbooaarrdd program under X-windows.  To invoke the program type:

  ggnnuucchheessss
       - simple curses based version

  ggnnuucchheessssnn
       - fancy version using curses and inverse video on UNIX, or IBM PC cur-
       sor controls and characters on MSDOS

  ggnnuucchheessssrr
       - ASCII based version

  ggnnuucchheesssscc
       - chesstool compatible version

  ggnnuucchheessssxx
       - xboard compatible version

TIME CONTROLS

  If one argument is given, it is the search time per move in
  [minutes:]seconds.  So ggnnuucchheessss 3300 will generate one move every 30 seconds,
  while ggnnuucchheessss 55::0000 will generate one move every 5 minutes.

  If two or more arguments are given, they will be used to set tournament
  time controls with the first argument of each pair being the number of
  moves and the second being the total clock time in minutes[:seconds].
  Thus, entering ggnnuucchheessss 6600 55 will set the clocks for 5 minutes (300
  seconds) for the first 60 moves, and ggnnuucchheessss 3300 33::3300 will allow 3 minutes
  and 30 seconds for 30 moves.

  ggnnuucchheessss 3300 55 11 ::3300 will allow 5 minutes for the first 30 moves and 30
  seconds for each move after that.  Up to 4 pairs of controls may be speci-
  fied.

  If no argument is given the program will prompt the user for level of play.

  For use with cchheessssttooooll or xxbbooaarrdd,, see the documentation on those programs.

BOOK

  At startup _G_n_u_c_h_e_s_s reads the _b_i_n_b_o_o_k file if it is present. It then looks
  for a _b_o_o_k file. If it is present it adds its contents to the _b_i_n_b_o_o_k data.
  If the _b_i_n_b_o_o_k file is writable a new combined _b_i_n_b_o_o_k file is written.

  The book _g_n_u_c_h_e_s_s._b_o_o_k consists of a sequence of openings.  An opening
  begins with a line starting with a !! , the rest of the line is comments.
  Following this is a series of moves in algebraic notation alternating white
  and black separated by white space. A move may have a ?? after it indicating
  this move should never be made in this position.  Moves are stored as
  position:move so transpositions between openings can take place.

HASHFILE

  The hashfile if created should be on the order of 4 megabytes or ggnnuucchheessss
  --cc 2222.. This file contains positions and moves learned from previous games.
  If a hashfile is used the computer makes use of the experience it gained in
  past games. Tests run so far show that it plays no worse with the hashfile
  than without, but it is not clear yet whether it provides a real advantage.

LEGAL MOVES

  NNoottee:: Piece letters and legal castling notation is determined by the
  language file.  What is specified here is the default English.

  Once _g_n_u_c_h_e_s_s is invoked, the program will display the board and prompt the
  user for a move. To enter a move, use the notation ee22ee44 where the first
  letter-number pair indicates the origination square and the second letter-
  number pair indicates the destination square.  An alternative is to use the
  notation nnff33 where the first letter indicates the piece type (p,n,b,r,q,k).
  To castle, type the origin and destination squares of the king just as you
  would do for a regular move, or type oo--oo or 00--00 for kingside castling and
  oo--oo--oo or 00--00--00 for queenside.  To promote a pawn append the type of the new
  piece to the move, as in ee77ee88qq or cc77cc88rr..

FUNCTION LETTERS

  --LL llaanngg
       Use language _l_a_n_g _f_r_o_m _t_h_e _f_i_l_e ggnnuucchheessss..llaanngg.. If -L is not specified
       it defaults to the language used in the first line in the file. ggnnuu--
       cchheessssrr --LL ggeerr will use the german language.

  --AA aaggiinngg--rraattee
       Specify aging rate for hash table entries

  [[--]]aa Do [do not] search on opponents time.

  --bb bbooookkffiillee
       Use bookfile for opening book.

  --BB bbiinnbbooookkffiillee
       Use binbookfile for binary opening book.

  --CC ccaacchhee--ssiizzee
       Specify evaluation cache table size (in entries).

  --DD   Toggle DEEPNULL at runtime.

  --EE   Toggle flag.threat.

  --ee   Toggle flag.neweval to force evaluations instead of estimates

  --FF   Toggle flag.noscore

  --HH hhaasshh--ddeepptthh
       pecify depth in plys for hashing.

  --SS ssiizzee
       Size of binbookfile for memory based and GDX books. For creating a
       binbookfile.

  --PP ppllyylleevveellss
       Number of plys to include in the binbookfile. For generating a bin-
       bookfile.

  --pp   Toggle flag.pvs

  --cc ssiizzee
       Create a new HASHFILE. File size is 2^size entries of approximately 65
       bytes.

  [[--]]hh Do [do not] use hashfile.

  --ll ppaatthhnnaammee
       Pathname of the loadfile use with the ggeett or xxggeett..

  --rr lleennggtthh
       Rehash length times in searching  entries for position in transposi-
       tion table.

  --ss ppaatthhnnaammee
       Pathname of the save file to use with the ssaavvee command.

  --tt   Show statistics for HASHFILE

  --TT ssiizzee
       Set the transposition table size to size entries. (minimum is MINTT-
       ABLE)

  --vv   Show version and patchlevel.

  --xx vvaalluuee
       Use vvaalluuee as the evaluation window xxwwnnddww..

COMMANDS

  In addition to legal moves, the following commands are available as
  responses.  NNoottee:: command names are determined by the _l_a_n_g_u_a_g_e file and may
  vary with the implementation. This is default English.

  aallgg -- allow algebraic input (not implemented)

  AAwwiinnddooww -- change Alpha window (default score + 90)

  BBwwiinnddooww -- change Beta window (default score - 90)

  bbeeeepp -- causes the program to beep after each move.

  bbdd -- updates the current board position on the display.

  bbkk -- Print out all moves for this position from the book as: move response
  value

  bbooookk -- turns off use of the opening library.

  bbootthh -- causes the computer to play both sides of a chess game.

  bbllaacckk -- causes the computer to take the black pieces.  If the computer is
  to move first the ggoo command must be given.

  eeccoo -- Print out opening information for this game - lists ECO # and varia-
  tions

  ccoooorrddss -- show coordinates on the display (visual only)

  ccoonntteemmpptt -- allows the value of _c_o_n_t_e_m_p_t to be modified.

  ddeebbuugg --  asks for a piece as color piece, as wb or bn, and shows its cal-
  culated value on each square.

  ddeebbuugglleevveell --  sets level of debugging output if compiled with debug
  options.

  ddeepptthh -- allows the user to change the search depth of the program.  The
  maximum depth is 29 ply.  Normally the depth is set to 29 and the computer
  terminates its search based on elapsed time rather than depth.  If depth is
  set to (say) 4 ply, the program will search until all moves have been exam-
  ined to a depth of 4 ply (with extensions up to 11 additional ply for
  sequences of checks and captures). If you set a maximum time per move and
  also use the depth command, the search will stop at the specified time or
  the specified depth, whichever comes first.

  eeaassyy -- toggles easy mode (thinking on opponents time) on and off. The
  default is easy mode ON.  If easy mode is disabled, the keyboard is polled
  for input every so often and when input is seen the search is terminated.
  It may also be terminated with a _s_i_g_i_n_t.

  eeddiitt -- allows the user to set up a board position.

          ## - command will clear the board.

          cc - toggle piece color.

          .. - command will exit setup mode.

        ppbb33 - place a pawn on b3

  Pieces are entered by typing a letter (p,n,b,r,q,k) for the piece followed
  by the coordinate.

  The usual warning about the _l_a_n_g_u_a_g_e _f_i_l_e applies.

  eexxiitt -- exits gnuchess.

  ffiirrsstt -- tells the computer to move first. Computer begins searching for a
  move.  (same as "go").

  ffoorrccee -- allows the user to enter moves for both sides. To get the program
  to play after a sequence of moves has been entered use the 'white' or
  'black' command followed by 'go'.

  ggaammeeiinn -- toggles game mode time control. Assumes the time specified for
  time control is the time for a complete game. Input with the level command
  should be the game time and the expected number of moves in a game.

  ggeett -- retrieves a game from disk.  The program will prompt the user for a
  file name.

  ggoo -- tells the computer to move first. Computer begins searching for a
  move.  (same as "first").

  hhaasshh -- use/don't use hashfile.

  hhaarrdd -- think on opponents time

  hhaasshhddeepptthh -- allows the user to change the minimum depth for using the
  hashfile and the number of moves from the begining of the game to use it.

  hheellpp -- displays a short description of the commands and the current status
  of options.

  hhiinntt -- causes the program to supply the user with its predicted move.

  lleevveell -- allows the user to set time controls such as 60 moves in 5 minutes
  etc.  In tournament mode, the program will vary the time it takes for each
  move depending on the situation.  If easy mode is disabled (using the
  'easy' command), the program will often respond with its move immediately,
  saving time on its clock for use later on.

  lliisstt -- writes the game moves and some statistics on search depth, nodes,
  and time to the file 'chess.lst'.

  mmaatteerriiaall -- toggle material flag - draws on no pawns and both sides < rook

  MMwwppaawwnn,, MMbbppaawwnn,, MMwwkknniigghhtt,, MMbbkknniigghhtt,, MMwwbbiisshhoopp,, MMbbbbiisshhoopp -- print out static
  position evaluation table

  nneeww -- starts a new game.

  pp -- evaluates the board and shows the point score for each piece. The
  total score for a position is the sum of these individual piece scores.

  ppoosstt -- causes the program to display the principle variation and the score
  during the search.  A score of 100 is equivalent to a 1 pawn advantage for
  the computer.

  uunnppoosstt -- turn off the post display.

  qquuiitt -- exits the game.

  rraannddoomm -- causes the program to randomize its move selection slightly.

  rrccppttrr -- set recapture mode.

  rreemmoovvee -- backout the last level for both sides. Equal to 2 _u_n_d_o'_s.

  rreevveerrssee -- causes the board display to be reversed.  That is, the white
  pieces will now appear at the top of the board.

  rrvv -- reverse board display.

  sseettuupp -- Compatibility with Unix chess and the nchesstool. Set up a board
  position.  Eight lines of eight characters are used to setup the board.
  a8-h8 is the first line. Black pieces are  represented  by  uppercase char-
  acters.

  ssttaarrss -- (gnuchessn only) add stars (*) to black pieces.

  ssaavvee -- saves a game to disk.  The program will prompt the user for a file
  name.

  sswwiittcchh -- causes the program to switch places with the opponent and begin
  searching.

  tteesstt -- performs some speed tests for MoveList and CaptureList generation,
  and ScorePosition position scoring for the current board.

  ttiimmee oottiimm -- ttiimmee set computers time remaining, intended for synchronizing
  clocks among multiple players.  -- oottiimm set opponents time remaining,
  intended for synchronizing clocks among multiple players.

  uunnddoo -- undoes the last move whether it was the computer's or the human's.
  You may also type "remove". This is equivalent to two "undo's" (e.g.
  retract one move for each side).

  wwhhiittee -- causes the computer to take the white pieces.  If the computer is
  to move first the ggoo command must be given.

  xxggeett -- read an _x_b_o_a_r_d position file.

  xxwwnnddww -- change X window. The window around alpha/beta used to determine
  whether the position should be scored or just estimated.

BUGS

SEE ALSO
  chesstool(6)
  xboard(6)























































